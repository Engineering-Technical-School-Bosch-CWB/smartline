@page "/prodList"
@using SmartLine.Services.ProductService
@using SmartLine.Model

@using SmartLine.Components.Shared.ConfirmButton

@inject IProductRepository _productRepository
@inject NavigationManager navigationManager

<h3>Produtos</h3>

@if (prodList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Time Side A</th>
                <th>Time Side B</th>
                <th>Part Number</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in prodList)
            {
                <tr>
                    <td>@prod.Id</td>
                    <td>@prod.Name</td>
                    <td>@prod.TimeSideA</td>
                    <td>@prod.TimeSideB</td>
                    <td>@prod.PartNumber</td>
                    <td>
                        <button class="btn btn-info" @onclick=@(() => UpdateProduct(prod))>Edit</button>
                        <button class="btn btn-danger" @onclick=@(() => DeleteProduct(prod))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <ConfirmButton Text="Novo Produto" OnClick="AddNewProduct" />
}

@code
{
    private IEnumerable<SmartLine.Model.Product>? prodList;
    protected override async Task OnInitializedAsync()
    {
        prodList = await _productRepository.GetProductAsync();
    }
    public void AddNewProduct()
    {
        navigationManager.NavigateTo("newProduct");
    }
    public void UpdateProduct(Product product)
    {
        navigationManager.NavigateTo($"updateproduct/{product.Id}");
    }
    public async void DeleteProduct(Product product)
    {
        await _productRepository.DeleteProductAsync(product.Id);
        prodList = await _productRepository.GetProductAsync();
        this.StateHasChanged();
    }
}
