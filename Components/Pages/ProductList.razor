@page "/prodList"
@using SmartLine.Services.ProductService
@using SmartLine.Data
@inject IProductRepository _productRepository
@inject NavigationManager navigationManager

<h3>Product List</h3>

@if (prodList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="AddNewProduct">Add New</button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Qty</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in prodList)
            {
                <tr>
                    <td>@prod.Id</td>
                    <td>@prod.Name</td>
                    <td>@prod.Quantity</td>
                    <td>
                        <button class="btn btn-info" @onclick=@(() => UpdateProduct(prod))>Edit</button>
                        <button class="btn btn-danger" @onclick=@(() => DeleteProduct(prod))>Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private IEnumerable<ProductInfo> prodList;
    protected override async Task OnInitializedAsync()
    {
        prodList = await _productRepository.GetProductAsync();
    }
    public void AddNewProduct()
    {
        navigationManager.NavigateTo("addupdateproduct");
    }
    public void UpdateProduct(ProductInfo productInfo)
    {
        navigationManager.NavigateTo($"updateproduct/{productInfo.Id}");
    }
    public async void DeleteProduct(ProductInfo productInfo)
    {
        await _productRepository.DeleteProductAsync(productInfo.Id);
        prodList = await _productRepository.GetProductAsync();
        this.StateHasChanged();
    }
}
