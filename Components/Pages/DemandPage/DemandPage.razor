@page "/demand"
@using SmartLine.Services.AlertService
@using SmartLine.Services.DemandService
@using SmartLine.Model

@using SmartLine.Components.Shared.ConfirmButton

@inject IAlertService AlertService
@inject IDemandRepository _demandRepository
@inject NavigationManager navigationManager

<h2>Demanda</h2>

@if (demandList == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="scroll-table">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Produto</th>
                    <th>Demanda</th>
                    <th>Giro Atual</th>
                    <th>Prazo</th>
                    <th>Editar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var demand in demandList.Select((value, index) => new { value, index }))
                {
                    <tr>
                        <td>@(demand.index + 1)</td>
                        <td>
                            @if (editMode.Contains(demand.value.Id))
                            {
                                <input @bind="demand.value.ProductId" class="form-control" />
                            }
                            else
                            {
                                @demand.value.ProductId
                            }
                        </td>
                        <td>
                            @if (editMode.Contains(demand.value.Id))
                            {
                                <input @bind="demand.value.Stock" class="form-control" />
                            }
                            else
                            {
                                @demand.value.Stock
                            }
                        </td>
                        <td>
                            @if (editMode.Contains(demand.value.Id))
                            {
                                <input @bind="demand.value.DemandProduct" class="form-control" />
                            }
                            else
                            {
                                @demand.value.DemandProduct
                            }
                        </td>
                        <td>
                            @if (editMode.Contains(demand.value.Id))
                            {
                                <input type="date" @bind="demand.value.DeadLine" class="form-control" />
                            }
                            else
                            {
                                @demand.value.DeadLine.ToShortDateString()
                            }
                        </td>
                        <td>
                            @if (editMode.Contains(demand.value.Id))
                            {
                                <button class="icon-btn" @onclick="() => SaveDemand(demand.value)">
                                    <svg style="height: 30px; width: 30px; color: #000000;" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z"/>
                                    </svg>
                                </button>
                            }
                            else
                            {
                                <button class="icon-btn" @onclick="() => EditDemand(demand.value)">
                                    <svg style="color: #00884a" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                    </svg>
                                </button>
                                <button class="icon-btn" @onclick="() => DeleteDemand(demand.value)">
                                    <svg style="color: #ed0007" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-square" viewBox="0 0 16 16">
                                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                                    </svg>
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <ConfirmButton Text="Nova Demanda" OnClick="CreateDemand" />
}


@code
{
    private List<SmartLine.Model.Demand> demandList = new();
    private HashSet<int> editMode = new();

    protected override async Task OnInitializedAsync()
    {
        demandList = (await _demandRepository.GetDemandAsync()).ToList();
    }

    public async Task CreateDemand()
    {
        var newDemand = new Demand
        {
            ProductId = 0,
            Stock = 0,
            DemandProduct = 0,
            DeadLine = DateTime.Today
        };

        // Salva imediatamente para obter o ID real
        await _demandRepository.AddUpdateDemandAsync(newDemand);

        // Recarrega a lista completa com o novo registro
        demandList = (await _demandRepository.GetDemandAsync()).ToList();

        // Ativa o modo de edição só no novo
        editMode.Clear();
        editMode.Add(newDemand.Id);

        StateHasChanged();
    }

    public void EditDemand(Demand demand)
    {
        editMode.Add(demand.Id);
    }

    public async Task SaveDemand(Demand demand)
    {
        await _demandRepository.AddUpdateDemandAsync(demand);
        editMode.Remove(demand.Id);
        StateHasChanged();
    }

    public async Task DeleteDemand(Demand demand)
    {
        bool confirm = await AlertService.ShowConfirmAsync(
            "Confirmar Exclusão",
            $"Tem certeza que deseja excluir a demanda do produto {demand.ProductId}?",
            "Sim", "Cancelar"
        );

        if (!confirm) return;

        await _demandRepository.DeleteDemandAsync(demand.Id);
        demandList.Remove(demand);
        editMode.Remove(demand.Id);

        StateHasChanged();
    }


}
