@page "/demand"
@using SmartLine.Services.DemandService
@using SmartLine.Model
@inject IDemandRepository _demandRepository
@inject NavigationManager navigationManager

<h1>Demanda</h1>

@if (demandList == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Produto</th>
                <th>Demanda</th>
                <th>Giro Atual</th>
                <th>Prazo</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var demand in demandList)
            {
                <tr>
                    <td>#</td>
                    <td>@demand.ProductId</td>
                    <td>
                        @if (editMode.Contains(demand.Id))
                        {
                            <input @bind="demand.ProductId" class="form-control" />
                        }
                        else
                        {
                            @demand.ProductId
                        }
                    </td>
                    <td>
                        @if (editMode.Contains(demand.Id))
                        {
                            <input @bind="demand.Stock" class="form-control" />
                        }
                        else
                        {
                            @demand.Stock
                        }
                    </td>
                    <td>
                        @if (editMode.Contains(demand.Id))
                        {
                            <input @bind="demand.DemandProduct" class="form-control" />
                        }
                        else
                        {
                            @demand.DemandProduct
                        }
                    </td>
                    <td>
                        @if (editMode.Contains(demand.Id))
                        {
                            <input type="date" @bind="demand.DeadLine" class="form-control" />
                        }
                        else
                        {
                            @demand.DeadLine.ToShortDateString()
                        }
                    </td>
                    <td>
                        @if (editMode.Contains(demand.Id))
                        {
                            <button class="btn btn-success" @onclick="() => SaveDemand(demand)">Salvar</button>
                        }
                        else
                        {
                            <button class="btn btn-info" @onclick="() => EditDemand(demand)">Editar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="CreateDemand">Nova Demanda</button>
}

@code
{
    private List<SmartLine.Model.Demand> demandList = new();
    private HashSet<int> editMode = new(); // IDs em modo de edição
    
    protected override async Task OnInitializedAsync()
    {
        demandList = (await _demandRepository.GetDemandAsync()).ToList();
    }

    public void CreateDemand()
    {
        var newDemand = new Demand
        {
            ProductId = 0,
            Stock = 0,
            DemandProduct = 0,
            DeadLine = DateTime.Today
        };

        // Adiciona no início da lista
        demandList.Insert(0, newDemand);

        // Usa um id negativo temporário para evitar conflito com já existentes
        editMode.Add(newDemand.GetHashCode());
    }


    public void EditDemand(Demand demand)
    {
        editMode.Add(demand.Id);
    }

    public async Task SaveDemand(Demand demand)
    {
        await _demandRepository.AddUpdateDemandAsync(demand);
        editMode.Remove(demand.Id);

        // Se era novo (Id = 0), precisamos recarregar a lista para obter o ID real
        if (demand.Id == 0)
        {
            demandList = (await _demandRepository.GetDemandAsync()).ToList();
        }

        StateHasChanged();
    }

}
